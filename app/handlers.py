import os
import html
import pycbrf
import aiohttp
import asyncio
import random
import secrets
import qrcode
import pyshorteners
import urllib.parse
from PIL import Image
from twilio.rest import Client
import pytesseract
import pyzbar.pyzbar as pyzbar
from gtts import gTTS
import yfinance as yf
from io import BytesIO
import matplotlib.pyplot as plt
from bs4 import BeautifulSoup
from prettytable import PrettyTable
from os import getenv
from dotenv import load_dotenv
from pyshorteners.exceptions import ShorteningErrorException


from aiogram import F, Router
from aiogram.types import Message, FSInputFile, CallbackQuery
from states import (
    ShortLinkFSM,
    ShortLinkFSM_QR,
    password_generate,
    weather_check,
    token_generate,
    CURS_VAL,
    STOCK_CHART,
    READ_TEXT,
    QR,
    TextFromImage,
    ParseWebsiteStates
)
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart


import app.keyboards as kb

router = Router()



@router.message(CommandStart())
async def reg_one(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø - Telegram-–±–æ—Ç \"MULT\".\n"
        "–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏ –∏ —Ä–∞–±–æ—Ç–µ. –ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "üí∏ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n"
        "üìä –ì—Ä–∞—Ñ–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∞–∫—Ü–∏–∏\n"
        "üí∞ –ö—É—Ä—Å—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "üîó –ö–æ—Ä–æ—Ç–∫–∏–µ —Å—Å—ã–ª–∫–∏ –∏–∑ –¥–ª–∏–Ω–Ω—ã—Ö URL\n"
        "üîí –ù–∞–¥–µ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏\n"
        "üîë –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã\n"
        "‚òÅÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n"
        "üó£Ô∏è –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ 3 —è–∑—ã–∫–∞—Ö\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º —Ä–µ—à–∏—Ç—å –ª—é–±—ã–µ –∑–∞–¥–∞—á–∏!",
        reply_markup=kb.main
    )
    
@router.message(F.text == "‚ùåcancel‚ùå")
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–≤—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.main)
    
@router.callback_query(F.text == "‚ùåcancel‚ùå")
async def cancel_handler(message: Message, state: FSMContext,callback: CallbackQuery):
    await state.clear()
    await callback.answer("–≤—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.main)
    
    

@router.message(F.text == '/restart')
async def restart_bot(message: Message, state: FSMContext):
    await state.set_state(None)  # reset the state to None
    await state.update_data({})  # clear the state data
    await reg_one(message)  # call the start command handler again

@router.message(F.text == '/help')
async def menu(message:Message):
    await message.answer(f'{message.from_user.first_name},–µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º',parse_mode='HTML',reply_markup=kb.kontacts)

@router.message(F.text == '/start')
async def restart_bot(message: Message, state: FSMContext):
    await state.set_state(None)  # reset the state to None
    await state.update_data({})  # clear the state data
    await reg_one(message)
    
    
@router.message(F.text == "—É–∑–Ω–∞—Ç—å –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç! üí∞")
async def get_currency_rates(message: Message):
    async with aiohttp.ClientSession() as session:
        API_CRIPT = getenv('API_CRIPT')
        async with session.get(API_CRIPT) as response:
            data = await response.json()
            coins = data['coins']
            table = PrettyTable(['name', 'Symbol',
                                 'Market Cap Rank',
                                 'Price', 'Price Change (24h)'])
            for coin in coins:
                table.add_row([
                    coin['item']['name'],
                    coin['item']['symbol'],
                    coin['item']['market_cap_rank'],
                    coin['item']['data']['price'],
                    f"{coin['item']['data']['price_change_percentage_24h']['usd']}%"
                ])
            code = (f"```\n{table}\n```")
            await message.reply(f"{code}", parse_mode='Markdown', reply_markup=kb.main)
    

@router.message(F.text == '–∫–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ üîó')
async def start_command(message: Message, state: FSMContext):
    await state.set_state(ShortLinkFSM.waiting_for_url)
    await message.answer("–ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å–≤–æ—é —Å—Å—ã–ª–∫—É", reply_markup=kb.cancel)


@router.message(ShortLinkFSM.waiting_for_url)
async def get_url(message: Message, state: FSMContext):
    url = message.text
    if url.strip() == "‚ùåcancel‚ùå":
        await state.clear()
        await message.answer("–≤—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.main)
    if not url.startswith('http://') and not url.startswith('https://'):
        await message.reply("–í—ã –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏ —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ http:// –∏–ª–∏ https://")
        await state.clear()
    await state.update_data(waiting_for_url=url)
    await message.answer("–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏...", reply_markup=kb.main)
    pys = pyshorteners.Shortener()
    try:
        short_link = pys.tinyurl.short(url)
        await message.reply(f"–í–æ—Ç —É–∫–æ—Ä–æ—á–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞:{short_link}",reply_markup=kb.main)
        await state.clear()
    except ShorteningErrorException as e:
        await message.reply(f"–û—à–∏–±–∫–∞ —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏",reply_markup=kb.main)
        print(e)
        await state.clear()
            
@router.message(F.text == 'qr code üì±')
async def start_command(message: Message, state: FSMContext):
    await state.set_state(ShortLinkFSM_QR.waiting_for_url_QR)
    await message.answer("–ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å–≤–æ—é —Å—Å—ã–ª–∫—É –∏ –∏–∑ –Ω–µ–µ —è —Å–¥–µ–ª–∞—é qr code", reply_markup=kb.cancel)

@router.message(ShortLinkFSM_QR.waiting_for_url_QR)
async def get_url(message: Message, state: FSMContext):
    await state.update_data(waiting_for_url_QR = message.text)
    if message.text.strip() == "‚ùåcancel‚ùå":
        await state.clear()
        await message.answer("–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)
    await message.answer("–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏...")
    data = await state.get_data()
    url= data['waiting_for_url_QR']
    qr = qrcode.QRCode(
    version=1,
    error_correction=qrcode.constants.ERROR_CORRECT_H,
    box_size=10,
    border=4,
)
    qr.add_data(url)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    img_path = f"qrcode_{message.from_user.id}.png"
    img.save(img_path)
    photo = FSInputFile(path=f"qrcode_{message.from_user.id}.png")
    await message.answer_photo(photo, caption="<b><u> –≤–æ—Ç Qr code –∏–∑ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–∏ </u></b>", parse_mode='HTML', reply_markup=kb.main)
    os.remove(img_path)
    await state.clear()
    
    
@router.message(F.text == '–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ üîë')
async def start_command(message: Message, state: FSMContext):
    await state.set_state(token_generate.generate_TK)
    await message.answer("–ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∂–µ–ª–∞–µ–º—É—é –¥–ª–∏–Ω–Ω—É —Ç–æ–∫–µ–Ω–∞ –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞–º –ø–∞—Ä–æ–ª—å", reply_markup=kb.cancel)
    
@router.message(token_generate.generate_TK)
async def get_url(message: Message, state: FSMContext):
    if message.text.strip() == "‚ùåcancel‚ùå":
        await state.clear()
        await message.answer("–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)
        return
    try:
        length = int(message.text)
        if length <= 0:
            await message.answer("–¥–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            return
    except ValueError:
        await message.answer("—è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        
    await state.update_data(password_length=length)
    msg = await message.answer("–≤–∞—à —Ç–æ–∫–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—å—Å—è [          ] 0%")
    cancel = False
    for i in range(101):
        if message.text.strip() == "‚ùåcancel‚ùå":
            cancel = True
            break
        
        await asyncio.sleep(0.05)
        progress_bar = "[" + "#" * (i // 10) + " " * (10 - i // 10) + "] " + str(i) + "%"
        if i % 10 == 0:  # edit message only every 10%
            if i != 0:  # don't edit message at 0%
                await msg.edit_text("–≤–∞—à —Ç–æ–∫–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—å—Å—è " + progress_bar, parse_mode='HTML', disable_notification=True)
                
    if cancel:
        await msg.edit_text("–æ—Ç–º–µ–Ω–µ–Ω–æ.", parse_mode='HTML', disable_notification=True)
        await state.clear()
    else:
        data = await state.get_data()
        length = data.get('password_length', 0)
        token = secrets.token_urlsafe(length)
        await msg.edit_text(f"–≤–∞—à —Ç–æ–∫–µ–Ω:\n<code>{html.escape(token)}</code>", parse_mode='HTML', reply_markup=kb.main)
        await state.clear()  # Clear the state
         
@router.message(F.text == '–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª—è üîí')
async def start_command(message: Message, state: FSMContext):
    await state.set_state(password_generate.password_length)
    await message.answer("–ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∂–µ–ª–∞–µ–º—É—é –¥–ª–∏–Ω–Ω—É –ø–∞—Ä–æ–ª—è –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞–º –ø–∞—Ä–æ–ª—å", reply_markup=kb.cancel)
    
@router.message(password_generate.password_length)
async def get_url(message: Message, state: FSMContext):
    if message.text.strip() == "‚ùåcancel‚ùå":
        await state.clear()
        await message.answer("–≤—ã –≤—ã—à–ª–∏ –≤ –≥–∞–ª–≤–Ω–æ–µ ", reply_markup=kb.main)
    try:
        length = int(message.text)
        if length <= 0:
            await message.answer("–¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except ValueError:
        await message.answer("—è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")

    await state.update_data(password_length=length)
    
    data = await state.get_data()
    length = data.get('password_length', 0)
    chars = '+-/*!&$?=@<>abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
    password = ''
    for i in range(int(length)):
        password += random.choice(chars)
    await message.answer(f"–≤–∞—à –ø–∞—Ä–æ–ª—å:\n<code>{html.escape(password)}</code>", parse_mode='HTML', reply_markup=kb.main)
    await state.clear()
        
        
@router.message(F.text == '—É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É ‚òÅÔ∏è')
async def start_command(message: Message, state: FSMContext):
    await state.set_state(weather_check.weather_state)
    await message.answer("–ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –≥–æ—Ä–æ–¥ –ø–æ–≥–æ–¥—É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å", reply_markup=kb.cancel)
@router.message(weather_check.weather_state)
async def get_url(message: Message, state: FSMContext):
    citi = message.text
    if citi.strip() == "‚ùåcancel‚ùå":
        await state.clear()
        await message.answer("–≤—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=kb.main )
        return
    await state.update_data(weather_state=citi)


    async with aiohttp.ClientSession() as session:
        API_WEATHER = getenv('API_WEATHER')
        async with session.get(f'https://api.openweathermap.org/data/2.5/weather?q={citi}&appid={API_WEATHER}&units=metric&lang=ru') as response:
            data = await response.json()
            if response.status == 404:
                await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–æ–º—É –≥–æ—Ä–æ–¥—É –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–∏—Å–ª–∞–ª–∏",reply_markup=kb.main)
                return

    main = data['main']
    weather_description = data['weather'][0]['description']
    temperature = main['temp']
    feels_like = main['feels_like']
    pressure = main['pressure']
    humidity = main['humidity']
    wind = data['wind']['speed']

    weather_text = (f'<b>{citi.upper()}</b>\n'
                    f'{weather_description}\n'
                    f'(—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C \n–ø–æ –æ—â—É—â–µ–Ω–∏—è–º {feels_like}¬∞C)\n'
                    f'–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} hPa\n'
                    f'–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n'
                    f'–í–µ—Ç–µ—Ä: {wind} m/s')

    await message.answer(f'<b><u>{weather_text}</u></b>', parse_mode='HTML',reply_markup=kb.main)
    await state.clear() 

currencies = {
    'üá¶üá∫ AUD': '–ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä',
    'üá¶üáø AZN': '–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π –º–∞–Ω–∞—Ç', 
    'üá¨üáß GBP': '–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç',
    'üá¶üá≤ AMD': '–ê—Ä–º—è–Ω—Å–∫–∏–π –¥—Ä–∞–º',
    'üáßüáæ BYN': '–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å',
    'üáßüá¨ BGN': '–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π –ª–µ–≤',
    'üáßüá∑ BRL': '–ë—Ä–∞–∑–∏–ª—å—Å–∫–∏–π —Ä–µ–∞–ª',
    'üá≠üá∫ HUF': '–í–µ–Ω–≥–µ—Ä—Å–∫–∏–π —Ñ–æ—Ä–∏–Ω—Ç',
    'üá≠üá∞ HKD': '–ì–æ–Ω–∫–æ–Ω–≥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä',
    'üá©üá∞ DKK': '–î–∞—Ç—Å–∫–∞—è –∫—Ä–æ–Ω–∞',
    'üá∫üá∏ USD': '–î–æ–ª–ª–∞—Ä –°–®–ê',
    'üá™üá∫ EUR': '–ï–≤—Ä–æ',
    'üáÆüá≥ INR': '–ò–Ω–¥–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è',
    'üá∞üáø KZT': '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ',
    'üá®üá¶ CAD': '–ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä',
    'üá∞üá¨ KGS': '–ö–∏—Ä–≥–∏–∑—Å–∫–∏–π —Å–æ–º',
    'üá®üá≥ CNY': '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å',
    'üá∞üá∑ KRW': '–ö–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞',
    'üá≤üá© MDL': '–ú–æ–ª–¥–∞–≤—Å–∫–∏–π –ª–µ–π',
    'üá≥üá¥ NOK': '–ù–æ—Ä–≤–µ–∂—Å–∫–∞—è –∫—Ä–æ–Ω–∞',
    'üáµüá± PLN': '–ü–æ–ª—å—Å–∫–∏–π –∑–ª–æ—Ç—ã–π',
    'üá∑üá¥ RON': '–†—É–º—ã–Ω—Å–∫–∏–π –ª–µ–π',
    'üá∏üá© XDR': '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è',
    'üá∏üá¨ SGD': '–°–∏–Ω–≥–∞–ø—É—Ä—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä',
    'üáπüáØ TJS': '–¢–∞–¥–∂–∏–∫—Å–∫–∏–π —Å–æ–º–æ–Ω–∏',
    'üáπüá∑ TRY': '–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞',
    'üáπüá≤ TMT': '–¢—É—Ä–∫–º–µ–Ω—Å–∫–∏–π –º–∞–Ω–∞—Ç',
    'üá∫üáø UZS': '–£–∑–±–µ–∫—Å–∫–∏–π —Å—É–º',
    'üá∫üá¶ UAH': '–£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞',
    'üá®üáø CZK': '–ß–µ—à—Å–∫–∞—è –∫—Ä–æ–Ω–∞',
    'üá∏üá™ SEK': '–®–≤–µ–¥—Å–∫–∞—è –∫—Ä–æ–Ω–∞',
    'üá®üá≠ CHF': '–®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫',
    'üáØüáµ JPY': '–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞'
}

@router.message(F.text == '—É–∑–Ω–∞—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç üí∏')
async def get_exchange_rate(message: Message, state: FSMContext):
    await state.set_state(CURS_VAL.CURS_VAL_one)
    cbrf = pycbrf.ExchangeRates()
    
    table = PrettyTable(['–í–∞–ª—é—Ç–∞', '–ö—É—Ä—Å'])
    for code, name in currencies.items():
        code_short = code.split(' ')[1]  # Extract the currency code (e.g. AUD, USD, etc.)
        try:
            rate = cbrf[code_short].value
            table.add_row([f"{name} ({code})", f"{rate:.2f} RUB"])
        except AttributeError:
            table.add_row([f"{name} ({code})", "–ù–µ—Ç –∫—É—Ä—Å–∞"])
    
    code = (f"```\n{table}\n```")
    await message.answer(code, parse_mode='Markdown')
    
    await message.answer("–•–æ—Ç–∏—Ç–µ –ø–æ—Å—á–∏—Ç–∞—Ç—å –≤–∞–ª—é—Ç—É?", reply_markup=kb.yes_no)

@router.message(F.text == '–Ω–µ—Ç')
async def cancel_currency(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–∞–ª—é—Ç", reply_markup=kb.main)

@router.message(F.text == '–¥–∞')
async def calculate_currency(message: Message, state: FSMContext):
    await state.set_state(CURS_VAL.CURS_VAL_two)
    await message.answer("–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É –±—É–¥–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å? (–Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –≤–∞–ª—é—Ç—ã –∏–ª–∏ 3-—Ö –±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥)",reply_markup=kb.currency_KB)

@router.message(CURS_VAL.CURS_VAL_two)
async def get_currency_name(message: Message, state: FSMContext):
    currency_input = message.text
    if currency_input.strip() == "‚ùåcancel‚ùå":
        await state.clear()
        await message.answer("–≤—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=kb.main )
        return
    for code, name in currencies.items():
        if code.split()[1] == currency_input.upper() or name.lower() == currency_input.lower():
            currency_name = name
            currency_code = code.split()[1]
            break
        elif code.startswith(currency_input):
            currency_name = name
            currency_code = code.split()[1]
            break
    else:
        await message.answer("–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=kb.currency_KB)
        return
    
    await state.update_data(currency_name=currency_name, currency_code=currency_code)
    await message.answer("–°–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü –≤–∞–ª—é—Ç—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å?")
    await state.set_state(CURS_VAL.CURS_VAL_three)

@router.message(CURS_VAL.CURS_VAL_three)
async def get_amount(message: Message, state: FSMContext):
    amount = float(message.text)
    await state.update_data(amount=amount)
    await message.answer("–í –∫–∞–∫—É—é –≤–∞–ª—é—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å? (–Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –≤–∞–ª—é—Ç—ã –∏–ª–∏ 3-—Ö –±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥)")
    await state.set_state(CURS_VAL.CURS_VAL_four)

@router.message(CURS_VAL.CURS_VAL_four)
async def get_target_currency(message: Message, state: FSMContext):
    target_currency_input = message.text
    for code, name in currencies.items():
        if code.split()[1] == target_currency_input.upper() or name.lower() == target_currency_input.lower():
            target_currency_name = name
            target_currency_code = code.split()[1]
            break
        elif code.startswith(target_currency_input):
            target_currency_name = name
            target_currency_code = code.split()[1]
            break
    else:
        await message.answer("–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=kb.currency_KB)
        return
    
    data = await state.get_data()
    currency_name = data['currency_name']
    amount = data['amount']
    cbrf = pycbrf.ExchangeRates()
    rate = cbrf[data['currency_code']].value
    target_rate = cbrf[target_currency_code].value
    result = amount * float(rate) / float(target_rate)
    await message.answer(f"{amount} {currency_name} = {result:.2f} {target_currency_name}", reply_markup=kb.main)
    await state.clear()
    
    
@router.message(F.text == '–≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ü–∏–π üìä')
async def get_stock_chart(message: Message, state: FSMContext):
    await state.set_state(STOCK_CHART.STOCK_CHART_one)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AAPL –¥–ª—è Apple) üìä", reply_markup=kb.stock_kb)

@router.callback_query(STOCK_CHART.STOCK_CHART_one)
async def get_stock_ticker(callback: CallbackQuery, state: FSMContext):
    ticker = callback.data
    if ticker == '‚ùåcancel‚ùå':
        await state.clear()
        await callback.answer("–≤—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.main)
        return
    await state.update_data(ticker=ticker)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:", reply_markup=kb.currency_KB_GR)
    await state.set_state(STOCK_CHART.STOCK_CHART_two)
    

@router.message(STOCK_CHART.STOCK_CHART_two)
async def get_currency(message: Message, state: FSMContext):
    currency = message.text
    if currency not in ["üá∫üá∏ USD", "üá™üá∫ EUR", "üá∑üá∫ RUB", "üá¨üáß GBP"]:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    ticker = (await state.get_data())["ticker"]
    try:
        data = yf.download(ticker, period="1y")
        if data.empty:
            await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–π –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ üòî", reply_markup=kb.main)
            await state.clear()
        data['Close'] = data['Close'].apply(lambda x: x * currency_exchange_rate(currency))  # Convert to selected currency
        plt.figure(figsize=(10, 6))
        plt.plot(data.index, data['Close'])
        plt.title(f"{ticker} Stock Price ({currency})")
        plt.xlabel("Date")
        plt.ylabel(f"Price ({currency})")
        plt.grid(True)
        file_name = f"{message.from_user.first_name}"
        plt.savefig(f"{file_name}.png")
        work_schedule = FSInputFile(path=f"{file_name}.png")
        await message.answer_photo(work_schedule, caption=f"<b><u> –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ü–∏–π {ticker} ({currency})</u></b> üìà", parse_mode='HTML', reply_markup=kb.main)
        # Delete the file after sending it to the user
        os.remove(f"{file_name}.png")
        await state.clear()
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–π üòï", reply_markup=kb.main)
        await state.clear()

def currency_exchange_rate(currency: str) -> float:
    # Implement your currency exchange rate logic here
    # For example, you can use an API or a fixed exchange rate
    exchange_rates = {"üá∫üá∏ USD": 1, "üá™üá∫ EUR": 0.88, "üá∑üá∫ RUB": 74.12, "üá¨üáß GBP": 0.76}
    return exchange_rates[currency]

@router.message(F.text == '–æ–∑–≤—É—á–∫–∞ üó£Ô∏è')
async def read_text(message: Message, state: FSMContext):
    await state.set_state(READ_TEXT.READ_TEXT_one)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–∑–≤—É—á–∫–∏:", reply_markup=kb.language)

@router.message(READ_TEXT.READ_TEXT_one)
async def choose_language(message: Message, state: FSMContext):
    language = message.text
    if language.strip() == "‚ùåcancel‚ùå":
        await state.clear()
        await message.answer("–≤—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=kb.main )
        return
    if language == "–†—É—Å—Å–∫–∏–π":
        language_code = "ru"
    elif language == "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π":
        language_code = "en"
    elif language == "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π":
        language_code = "fr"
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —è–∑—ã–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=kb.main)
        await state.clear()
        return
    await state.update_data(language_code=language_code)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–≤—É—á–∏—Ç—å üìù",reply_markup=kb.cancel)
    await state.set_state(READ_TEXT.READ_TEXT_two)

@router.message(READ_TEXT.READ_TEXT_two)
async def get_text_to_read(message: Message, state: FSMContext):
    text = message.text
    if text.strip() == "‚ùåcancel‚ùå":
        await state.clear()
        await message.answer("–≤—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=kb.main )
        return
    language_code = (await state.get_data())["language_code"]
    user_id = message.from_user.id
    file_name = f"{user_id}.mp3"
    tts = gTTS(text=text, lang=language_code)
    tts.save(file_name)
    with open(file_name, "rb") as audio:
        work_schedule = FSInputFile(path=file_name)
        await message.answer_audio(work_schedule,reply_markup=kb.main)
    os.remove(file_name)  # Remove the audio file after sending it
    await state.clear()


@router.message(F.text == '—Å—Å—ã–ª–∫–∞ –∏–∑ QR üì±')
async def process_qr_code_data(message: Message, state: FSMContext):
    await message.answer('–ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ', reply_markup=kb.cancel)
    await state.set_state(QR.qr_code_one)

@router.message(QR.qr_code_one)
async def process_qr_code_data(message: Message, state: FSMContext):
    if message.photo:
        file_id = message.photo[-1].file_id
        async with aiohttp.ClientSession() as session:
            TOKEN = getenv('TOKEN')
            async with session.get(f"https://api.telegram.org/bot{TOKEN}/getFile?file_id={file_id}") as response:
                file_path = (await response.json())['result']['file_path']
                async with session.get(f"https://api.telegram.org/file/bot{TOKEN}/{file_path}") as response:
                    image_data = await response.read()
                    image = BytesIO(image_data)
                    image = Image.open(image)
                    decoded_objects = pyzbar.decode(image)
                    if decoded_objects:
                        qr_code_data = decoded_objects[0].data.decode("utf-8")
                        await state.update_data(qr_code_one=qr_code_data)
                        await message.answer(f'QR-–∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É: {qr_code_data}', reply_markup=kb.main)
                        await state.clear() 
                    else:
                        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å QR-–∫–æ–¥', reply_markup=kb.main)
                        await state.clear() 
    elif message.text == '‚ùåcancel‚ùå':
        await state.clear()
        await message.answer('–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.main)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùåcancel‚ùå –¥–ª—è –æ—Ç–º–µ–Ω—ã', reply_markup=kb.cancel)
        
@router.message(F.text == '—Ç–µ–∫—Å—Ç –∏–∑ —Ñ–æ—Ç–≥—Ä–∞—Ñ–∏–∏ üñºÔ∏è')
async def process_qr_code_data(message: Message, state: FSMContext):
    await message.answer('–ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ', reply_markup=kb.cancel)
    await state.set_state(TextFromImage.waiting_for_image)

@router.message(TextFromImage.waiting_for_image)
async def process_image(message: Message, state: FSMContext):
    if message.photo:
        file_id = message.photo[-1].file_id
        async with aiohttp.ClientSession() as session:
            TOKEN = getenv('TOKEN')
            async with session.get(f"https://api.telegram.org/bot{TOKEN}/getFile?file_id={file_id}") as response:
                file_path = (await response.json())['result']['file_path']
                async with session.get(f"https://api.telegram.org/file/bot{TOKEN}/{file_path}") as response:
                    image_data = await response.read()
                    image = BytesIO(image_data)
                    image = Image.open(image)
                    # Specify the path to the Tesseract executable
                    pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
                    # Specify the languages to support (e.g., Russian, English, etc.)
                    languages = ['rus', 'eng', 'fra', 'pa', 'deu', 'ita']  # Add more languages as needed
                    text = ''
                    for lang in languages:
                        try:
                            recognized_text = pytesseract.image_to_string(image, lang=lang)
                            if recognized_text:
                                text += f"**{lang.upper()}**: {recognized_text}\n"
                        except pytesseract.TesseractError:
                            pass
                    if text:
                        await message.answer(f'–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}', reply_markup=kb.main)
                        await state.clear()
                    else:
                        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ ü§î', reply_markup=kb.main)
                        await state.clear()
    elif message.text == '‚ùåcancel‚ùå':
        await state.clear()
        await message.answer('–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.main)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º üì∑')
    

@router.message(F.text == "–ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞ü§ñ")
async def start(message: Message, state: FSMContext):
    if message.text == '‚ùåcancel‚ùå':
        await state.clear()
        await message.answer('–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.main)
    else:
        await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–ø–∞—Ä—Å–∏—Ç—å —Å–∞–π—Ç—ã. –ö–∞–∫–æ–π —Å–∞–π—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–ø–∞—Ä—Å–∏—Ç—å?')
        await state.set_state(ParseWebsiteStates.website_url)

@router.message(ParseWebsiteStates.website_url)
async def get_website_url(message: Message, state: FSMContext):
    if message.text == '‚ùåcancel‚ùå':
        await state.clear()
        await message.answer('–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.main)
    else:
        website_url = message.text
        await state.update_data(website_url=website_url)
        await message.answer('–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ç–µ–∫—Å—Ç, —Å—Å—ã–ª–∫–∏)', reply_markup=kb.pars)
        await state.set_state(ParseWebsiteStates.info_type)

@router.message(ParseWebsiteStates.info_type)
async def get_info_type(message: Message, state: FSMContext):
    if message.text == 'cancel':
        await state.clear()
        await message.answer('–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.main)
    else:
        info_type = message.text
        data = await state.get_data()
        website_url = data['website_url']
        async with aiohttp.ClientSession() as session:
            async with session.get(website_url) as response:
                html = await response.text()
                soup = BeautifulSoup(html, 'html.parser')

                if info_type == '–∑–∞–≥–æ–ª–æ–≤–æ–∫':
                    title = soup.title.string
                    await message.answer(f'–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}', reply_markup=kb.main)
                    await state.clear()
                elif info_type == '—Ç–µ–∫—Å—Ç':
                    text = soup.get_text()
                    chunks = [text[i:i+4096] for i in range(0, len(text), 4096)]
                    for chunk in chunks:
                        if len(chunk) > 4000:  # split into smaller chunks if necessary
                            sub_chunks = [chunk[i:i+2000] for i in range(0, len(chunk), 2000)]
                            for sub_chunk in sub_chunks:
                                await message.answer(f'–¢–µ–∫—Å—Ç: {sub_chunk}', reply_markup=kb.main)
                                await asyncio.sleep(1)  # add a 1-second delay between messages
                                await state.clear()
                        else:
                            await message.answer(f'–¢–µ–∫—Å—Ç: {chunk}', reply_markup=kb.main)
                            await asyncio.sleep(1)  # add a 1-second delay between messages
                            await state.clear()
                    await state.clear()
                elif info_type == '—Å—Å—ã–ª–∫–∏':
                    links = [a['href'] for a in soup.find_all('a', href=True)]
                    working_links = []
                    for link in links:
                        if not link.startswith('http'):
                            link = f'http://{link}'
                        try:
                            async with session.head(link) as response:
                                if response.status == 200:
                                    working_links.append(link)
                        except aiohttp.ClientError:
                            pass
                    formatted_links = '\n'.join([f'‚Ä¢ [{link}]({urllib.parse.quote(link, safe=":/")})' for link in working_links])
                    chunks = [formatted_links[i:i+4096] for i in range(0, len(formatted_links), 4096)]
                    for chunk in chunks:
                        if len(chunk) > 4000:  # split into smaller chunks if necessary
                            sub_chunks = [chunk[i:i+2000] for i in range(0, len(chunk), 2000)]
                            for sub_chunk in sub_chunks:
                                await message.answer(f'–°—Å—ã–ª–∫–∏:\n{sub_chunk}', parse_mode='Markdown', reply_markup=kb.main)
                                await asyncio.sleep(1)  # add a 1-second delay between messages
                        else:
                            await message.answer(f'–°—Å—ã–ª–∫–∏:\n{chunk}', parse_mode='Markdown', reply_markup=kb.main)
                            await asyncio.sleep(1)  # add a 1-second delay between messages
                    await state.clear()
                elif info_type == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':
                    images = [img['src'] for img in soup.find_all('img', src=True)]
                    for image in images:
                        if not image.startswith('http'):
                            image = f'http://{website_url}/{image}'
                        await message.answer(f'–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image}', reply_markup=kb.main)
                        await asyncio.sleep(1)  # add a 1-second delay between messages
                    await state.clear()
                else:
                    await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
                    await state.clear()
        await state.clear()
        
        

    

    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
# @router.message(F.text == '—Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ')
# async def start_command(message: Message, state: FSMContext):
#     await state.set_state(url_check.save_video_state)
#     await message.answer("–ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Ä–æ–ª–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å")
    

        
        
        
# @router.message(url_check.save_video_state)
# async def get_url(message: types.Message, state: FSMContext):
#     link = message.text
#     await state.update_data(save_video_state=link)
#     yt = mps.Youtube(url=link)
#     stream = yt.streams.filter(only_audio=False).first()
#     filename = stream.default_filename
#     stream.download(output_path="D:\multi_bot\\videos")
#     await message.answer("Video downloaded successfully!")
#     await message.answer_video( filename, caption="Here is your video!")
#     os.remove(filename)
#     await state.finish()
    
#     if message.text.startswith('https://www.youtube.com/'):
#     yt_url = message.text
#     yt = YouTube(yt_url)
#     stream = yt.streams.filter(only_audio=False).first()  # –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ only_audio=False
#     file_path = stream.download(output_path='videos', filename_prefix='video_')  # –¥–æ–±–∞–≤–ª–µ–Ω–æ filename_prefix
#     fs_input_file = FSInputFile(file_path)

#     await message.answer_video(open(f'{fs_input_file}', 'rb'))



# @router.message(url_check.save_video_state)
# async def get_url(message: Message, state: FSMContext):
#     if message.text.startswith('https://www.youtube.com/'):
#         yt_url = message.text
#         await state.update_data(save_video_state=yt_url)
#         yt = YouTube(yt_url)
#         stream = yt.streams.filter(only_audio=False).first()  # –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ only_audio=False
#         file_path = stream.download(output_path='videos', filename_prefix='video_')  # –¥–æ–±–∞–≤–ª–µ–Ω–æ filename_prefix
#         fs_input_file = FSInputFile(file_path)

#         await message.answer_video( fs_input_file, caption="Here is your video!")
#         os.remove(file_path)
#         await state.finish()
        

